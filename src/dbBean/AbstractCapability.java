package dbBean;

// Generated 1-mar-2017 16.50.58 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * AbstractCapability generated by hbm2java
 */
@Entity
@Table(name = "abstract_capability", catalog = "musa_db")
public class AbstractCapability implements java.io.Serializable {

	private Integer idAbstratCapability;
	private Domain domain;
	private String name;
	private String input;
	private String output;
	private String params;
	private String body;
	private String assumption;
	private String description;
	private Set<AbstractCapabilityProposal> abstractCapabilityProposals = new HashSet<AbstractCapabilityProposal>(
			0);
	private Set<ConcreteCapability> concreteCapabilities = new HashSet<ConcreteCapability>(
			0);
	public AbstractCapability() {
	}

	public AbstractCapability(Domain domain, String name, String input,
			String output, String params, String preCondition,
			String assumption, String description,
			Set<AbstractCapabilityProposal> abstractCapabilityProposals,
			Set<ConcreteCapability> concreteCapabilities) {
		this.domain = domain;
		this.name = name;
		this.input = input;
		this.output = output;
		this.params = params;
		this.body = preCondition;
		this.assumption = assumption;
		this.description = description;
		this.abstractCapabilityProposals = abstractCapabilityProposals;
		this.concreteCapabilities = concreteCapabilities;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idAbstrat_Capability", unique = true, nullable = false)
	public Integer getIdAbstratCapability() {
		return this.idAbstratCapability;
	}

	public void setIdAbstratCapability(Integer idAbstratCapability) {
		this.idAbstratCapability = idAbstratCapability;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idDomain")
	public Domain getDomain() {
		return this.domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "input")
	public String getInput() {
		return this.input;
	}

	public void setInput(String input) {
		this.input = input;
	}

	@Column(name = "output")
	public String getOutput() {
		return this.output;
	}

	public void setOutput(String output) {
		this.output = output;
	}

	@Column(name = "params")
	public String getParams() {
		return this.params;
	}

	public void setParams(String params) {
		this.params = params;
	}

	@Column(name = "body")
	public String getBody() {
		return this.body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	@Column(name = "assumption")
	public String getAssumption() {
		return this.assumption;
	}

	public void setAssumption(String assumption) {
		this.assumption = assumption;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "abstractCapability")
	public Set<AbstractCapabilityProposal> getAbstractCapabilityProposals() {
		return this.abstractCapabilityProposals;
	}

	public void setAbstractCapabilityProposals(
			Set<AbstractCapabilityProposal> abstractCapabilityProposals) {
		this.abstractCapabilityProposals = abstractCapabilityProposals;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "abstractCapability")
	public Set<ConcreteCapability> getConcreteCapabilities() {
		return this.concreteCapabilities;
	}

	public void setConcreteCapabilities(
			Set<ConcreteCapability> concreteCapabilities) {
		this.concreteCapabilities = concreteCapabilities;
	}

}

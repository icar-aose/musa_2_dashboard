package dbBean;
// Generated 28-feb-2018 18.14.57 by Hibernate Tools 5.2.8.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.google.gson.annotations.Expose;

/**
 * FunctionalReq generated by hbm2java
 */
@Entity
@Table(name = "functional_req", catalog = "musa_db")
public class FunctionalReq implements java.io.Serializable {
	@Expose
	private Integer idFunctionalReq;
	private Process process;
	private Specification specification;
	@Expose
	private String name;
	private String type;
	@Expose
	private String description;
	@Expose
	private String priority;
	private String currentState;
	@Expose
	private String body;
	@Expose
	private String actors;
	private Set<FunctionalReqRelations> functionalReqRelationsesForIdStart = new HashSet<FunctionalReqRelations>(0);
	private Set<FunctionalReqRelations> functionalReqRelationsesForIdEnd = new HashSet<FunctionalReqRelations>(0);

	public FunctionalReq() {
	}

	public FunctionalReq(Process process, Specification specification, String name, String type, String description,
			String priority, String currentState, String body, String actors,
			Set<FunctionalReqRelations> functionalReqRelationsesForIdStart,
			Set<FunctionalReqRelations> functionalReqRelationsesForIdEnd) {
		this.process = process;
		this.specification = specification;
		this.name = name;
		this.type = type;
		this.description = description;
		this.priority = priority;
		this.currentState = currentState;
		this.body = body;
		this.actors = actors;
		this.functionalReqRelationsesForIdStart = functionalReqRelationsesForIdStart;
		this.functionalReqRelationsesForIdEnd = functionalReqRelationsesForIdEnd;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idFunctional_Req", unique = true, nullable = false)
	public Integer getIdFunctionalReq() {
		return this.idFunctionalReq;
	}

	public void setIdFunctionalReq(Integer idFunctionalReq) {
		this.idFunctionalReq = idFunctionalReq;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idWF")
	public Process getProcess() {
		return this.process;
	}

	public void setProcess(Process process) {
		this.process = process;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idSpecification")
	public Specification getSpecification() {
		return this.specification;
	}

	public void setSpecification(Specification specification) {
		this.specification = specification;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "type")
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "priority")
	public String getPriority() {
		return this.priority;
	}

	public void setPriority(String priority) {
		this.priority = priority;
	}

	@Column(name = "current_state", length = 29)
	public String getCurrentState() {
		return this.currentState;
	}

	public void setCurrentState(String currentState) {
		this.currentState = currentState;
	}

	@Column(name = "body")
	public String getBody() {
		return this.body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	@Column(name = "actors")
	public String getActors() {
		return this.actors;
	}

	public void setActors(String actors) {
		this.actors = actors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "functionalReqByIdStart")
	public Set<FunctionalReqRelations> getFunctionalReqRelationsesForIdStart() {
		return this.functionalReqRelationsesForIdStart;
	}

	public void setFunctionalReqRelationsesForIdStart(Set<FunctionalReqRelations> functionalReqRelationsesForIdStart) {
		this.functionalReqRelationsesForIdStart = functionalReqRelationsesForIdStart;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "functionalReqByIdEnd")
	public Set<FunctionalReqRelations> getFunctionalReqRelationsesForIdEnd() {
		return this.functionalReqRelationsesForIdEnd;
	}

	public void setFunctionalReqRelationsesForIdEnd(Set<FunctionalReqRelations> functionalReqRelationsesForIdEnd) {
		this.functionalReqRelationsesForIdEnd = functionalReqRelationsesForIdEnd;
	}

}
